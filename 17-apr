<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visual Form Designer</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="formBuilder" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
    <button onclick="addElement('input')">Add Input</button>
    <button onclick="addElement('textarea')">Add Textarea</button>
    <button onclick="addElement('select')">Add Select</button>
    <button id="saveForm" onclick="saveForm()">Save Form</button>
    <script src="script.js"></script>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    padding: 20px;
}

#formBuilder {
    margin-bottom: 20px;
}

.field {
    margin-bottom: 10px;
    border: 1px solid #ccc;
    padding: 10px;
    background-color: #f9f9f9;
    cursor: move; /* Indicates that you can drag the field */
}

input, select, textarea {
    width: 100%;
    padding: 5px;
    margin-top: 5px;
}

button {
    margin-right: 5px;
}


const formData = [
    { id: "c0ac49c5-871e-4c72-a878-251de465e6b4", type: "input", label: "Sample Label", placeholder: "Sample placeholder" },
    { id: "146e69c2-1630-4a27-9d0b-f09e463a66e4", type: "select", label: "Sample Label", options: ["Option 1", "Option 2", "Option 3"] },
    { id: "45002ecf-85cf-4852-bc46-529f94a758f5", type: "input", label: "Another Label", placeholder: "Another Placeholder" },
    { id: "680cff8d-c7f9-40be-8767-e3d6ba420952", type: "textarea", label: "Text Area", placeholder: "Type here..." }
];

function initForm() {
    const formBuilder = document.getElementById('formBuilder');
    formBuilder.innerHTML = '';
    formData.forEach((element, index) => {
        const fieldDiv = document.createElement('div');
        fieldDiv.className = 'field';
        fieldDiv.id = element.id;
        fieldDiv.draggable = true;
        fieldDiv.ondragstart = drag;
        fieldDiv.innerHTML = `
            <label contenteditable="true" onblur="updateLabel('${element.id}', this.innerText)">${element.label}</label>
            ${element.type === 'select' ? renderSelect(element) : renderInput(element)}
            <button onclick="deleteElement('${element.id}')">Delete</button>
        `;
        formBuilder.appendChild(fieldDiv);
    });
}

function renderInput(element) {
    return `<input type="${element.type}" placeholder="${element.placeholder}" onblur="updatePlaceholder('${element.id}', this.value)" value="${element.placeholder}">`;
}

function renderSelect(element) {
    let optionsHTML = element.options.map(option => `<option>${option}</option>`).join('');
    return `<select ondblclick="editOptions('${element.id}')">${optionsHTML}</select>`;
}

function addElement(type) {
    const newId = Math.random().toString(36).substring(2, 15); // Generate a pseudo-random ID
    const newElement = {
        id: newId,
        type: type,
        label: "New " + type.charAt(0).toUpperCase() + type.slice(1),
        placeholder: "Enter " + type,
        options: ['Option 1', 'Option 2']
    };
    formData.push(newElement);
    initForm();
}

function deleteElement(id) {
    const index = formData.findIndex(element => element.id === id);
    if (index > -1) {
        formData.splice(index, 1);
        initForm();
    }
}

function saveForm() {
    console.log(JSON.stringify(formData));
}

function updateLabel(id, newText) {
    const element = formData.find(el => el.id === id);
    if (element) {
        element.label = newText;
    }
}

function updatePlaceholder(id, newPlaceholder) {
    const element = formData.find(el => el.id === id);
    if (element) {
        element.placeholder = newPlaceholder;
    }
}

function editOptions(id) {
    const element = formData.find(el => el.id === id);
    if (element && element.type === 'select') {
        const newOptions = prompt("Enter options separated by commas", element.options.join(','));
        if (newOptions !== null) {
            element.options = newOptions.split(',');
            initForm();
        }
    }
}

function allowDrop(event) {
    event.preventDefault();
}

function drag(event) {
    event.dataTransfer.setData("text", event.target.id);
}

function drop(event) {
    event.preventDefault();
    var data = event.dataTransfer.getData("text");
    var dropped = document.getElementById(data);
    var target = event.target.closest('.field');

    if (target && dropped !== target) {
        var fromIndex = Array.from(dropped.parentNode.children).indexOf(dropped);
        var toIndex = Array.from(target.parentNode.children).indexOf(target);
        if (fromIndex < toIndex) {
            target.parentNode.insertBefore(dropped, target.nextSibling);
        } else {
            target.parentNode.insertBefore(dropped, target);
        }
    }
}

initForm();
